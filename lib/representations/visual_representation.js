// Generated by CoffeeScript 1.11.1

/*
 *
 * Visual Representation.
 *
 * Adapted by Bryce Summers on 10.26.2017
 *
 * Handles the management of a visual representation.
 *
 *
 * Usage: Configure, Build, {Convert, Render, Mutate}.
 */

(function() {
  BSS.Visual_Representation = (function() {
    function Visual_Representation() {
      this._obj3D = new THREE.Object3D();
      this._children = new Set();
    }


    /*
    
    Configure
     */

    Visual_Representation.prototype.addVisual = function(visual) {
      this._obj3D.add(visual);
      return this._children.add(visual);
    };

    Visual_Representation.prototype.removeVisual = function(visual) {
      this._obj3D.remove(visual);
      return this._children["delete"](visual);
    };

    Visual_Representation.prototype.getVisual = function() {
      return this._obj3D;
    };

    Visual_Representation.prototype.clearVisuals = function() {
      this._children.forEach((function(_this) {
        return function(visual) {
          return _this._obj3D.remove(visual);
        };
      })(this));
      return this._children = new Set();
    };

    Visual_Representation.prototype.setCameraobj3D = function(obj3D) {};

    Visual_Representation.prototype.setPosition = function(position) {
      var z;
      z = this._obj3D.position.z;
      this._obj3D.position.copy(position.clone());
      return this._obj3D.position.z = z;
    };

    Visual_Representation.prototype.getPosition = function() {
      return this._obj3D.position.clone();
    };

    Visual_Representation.prototype.setRotation = function(rotation_z) {
      return this._obj3D.rotation.z = rotation_z;
    };

    Visual_Representation.prototype.getRotation = function() {
      return this._obj3D.rotation.z;
    };

    Visual_Representation.prototype.setUpDirection = function(up) {
      var angle;
      up = up.normalize();
      angle = Math.atan2(up.y, up.x);
      return this.setRotation(angle);
    };

    Visual_Representation.prototype.setScale = function(scale) {
      return this._obj3D.scale.copy(scale.clone());
    };

    Visual_Representation.prototype.getScale = function() {
      return this._obj3D.scale.clone();
    };


    /*
    
    Conversion to other forms.
     */

    Visual_Representation.prototype.build = function() {};

    Visual_Representation.prototype.toCollisionAreas = function(output) {
      var a, b, c, face, faces, geometry, i, j, len, len1, localToWorld, mesh, mesh_list, obj, polyline, polyline_list, vertices;
      obj = this._obj3D;
      mesh_list = this._to_mesh_list(obj);
      polyline_list = [];
      if (output !== void 0) {
        polyline_list = output;
      }
      for (i = 0, len = mesh_list.length; i < len; i++) {
        mesh = mesh_list[i];
        geometry = mesh.geometry;
        vertices = geometry.vertices;
        faces = geometry.faces;
        localToWorld = mesh.matrixWorld;
        for (j = 0, len1 = faces.length; j < len1; j++) {
          face = faces[j];
          a = vertices[face.a].clone();
          b = vertices[face.b].clone();
          c = vertices[face.c].clone();
          a.applyMatrix4(localToWorld);
          b.applyMatrix4(localToWorld);
          c.applyMatrix4(localToWorld);
          a = this._vector_to_point(a);
          b = this._vector_to_point(b);
          c = this._vector_to_point(c);
          polyline = new BDS.Polyline(true, [a, b, c]);
          polyline.setAssociatedData(this);
          polyline_list.push(polyline);
        }
      }
      return polyline_list;
    };

    Visual_Representation.prototype._vector_to_point = function(vec) {
      return new BDS.Point(vec.x, vec.y, vec.z);
    };

    Visual_Representation.prototype._to_mesh_list = function(obj) {
      var add_output, output;
      output = [];
      add_output = function(o) {
        if (o.geometry) {
          return output.push(o);
        }
      };
      obj.traverse(add_output);
      return output;
    };

    return Visual_Representation;

  })();

}).call(this);
