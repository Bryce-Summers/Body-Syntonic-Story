// Generated by CoffeeScript 1.11.1

/*
    User Interface Layer class. Represents a single layer of user interface elements.
    Written by Bryce on May.4.2017
    Adapted by Bryce Summers on Mar.22.2018
    
    Purpose: This class provide general functions for the operation of UI's.
        - static visual generation.
        - creation and deletion of buttons.

    This class also handles the text based display of information to the users.

    This class internally manages the visualization, querying, and management of label objects.
    It returns reference objects that can be used to instruct this class to perform modifications.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EX.UI = (function(superClass) {
    extend(UI, superClass);

    function UI(z_depth) {
      UI.__super__.constructor.call(this, new BSS.Model());
      this._bvh = new BDS.BVH2D([]);
      this._elements = new Set();
      this._c_resting = new THREE.Color(0xe6dada);
      this.z_depth = z_depth;
    }


    /*
    Labels: They sit on screen with a text visual object underneath.
     */

    UI.prototype.createLabel = function(params) {
      var background_visual, container_visual, element, text_visual;
      container_visual = new THREE.Object3D();
      background_visual = EX.Visual_Factory.newPolygon(params.area, params.fill);
      container_visual.add(background_visual);
      text_visual = EX.Visual_Factory.new_label(params.str);
      text_visual.position.x = params.textx;
      text_visual.position.y = params.texty;
      container_visual.add(text_visual);
      element = {
        area: params.area,
        visual: container_visual,
        text_visual: text_visual,
        background_visual: background_visual,
        str: params.str,
        fill: params.fill,
        textx: params.textx,
        texty: params.texty
      };
      element.area.setAssociatedData(element);
      this._bvh.add(element.area);
      this._elements.add(element);
      this.getVisualRepresentation().addVisual(container_visual);
      return element;
    };

    UI.prototype.updateLabel = function(element, params) {
      var container, text_visual;
      if (params.update_str) {
        container = element.visual;
        container.remove(element.text_visual);
        text_visual = this._newTextVisual(element);
        container.add(text_visual);
        return element.text_visual = text_visual;
      }
    };

    UI.prototype._newTextVisual = function(params) {
      var text_visual;
      text_visual = EX.Visual_Factory.new_label(params.str);
      text_visual.position.x = params.textx;
      text_visual.position.y = params.texty;
      text_visual.position.z = this.z_depth + .01;
      return text_visual;
    };

    UI.prototype.createButton = function(area, material, click_function) {

      /*
       * An element is an associative object of the following form:
       * {click:    () -> what happens when the user clicks on this element.
       *  polyline: A polyline representing the collision detection region for the object.
       *  material: a pointer to the material object responsible for filling the actual
       *  object on the screen, such as with an associated image base texture map.
       */
      var element;
      material.color = this._c_resting;
      element = {
        click: click_function,
        polyline: area,
        material: material
      };
      element.polyline.setAssociatedData(element);
      this._bvh.add(element.polyline);
      this._elements.add(element);
      return element;
    };

    UI.prototype.removeButton = function(b) {
      var a;
      a = this._elements["delete"](b);
      b = this._bvh.remove(b.polyline);
      return a && b;
    };

    UI.prototype.query_point = function(pt) {
      return this._bvh.query_point(pt);
    };


    /*
    
    Internal Helper functions.
     */

    UI.prototype._createRectangle = function(params) {
      var rect;
      rect = TSAG.style.unit_meshes.newSquare({
        color: new THREE.Color(params.fill)
      });
      rect.scale.x = params.w;
      rect.scale.y = params.h;
      rect.position.x = params.x + params.w / 2;
      rect.position.y = params.y + params.h / 2;
      rect.position.z = params.depth;
      return rect;

      /*
      mesh.scale.x = 200
      mesh.scale.y = 200
      
      
      view.add(mesh)
      
      window.mesh = mesh
       */

      /*
      @controller_build_road = 
      @controller_build_road.setActive(false)
      @controller_demolish_road = 
      @controller_demolish_road.setActive(false)
       */

      /*
       * -- Tools UI Buttons.
      b1 = new BDS.Box(new BDS.Point(0,   0),
                       new BDS.Point(64, 64));
      
      b2 = new BDS.Box(new BDS.Point(64,   0),
                       new BDS.Point(128, 64));
      
      b3 = new BDS.Box(new BDS.Point(128,  0),
                       new BDS.Point(192, 64));
      
      p1 = b1.toPolyline()
      p2 = b2.toPolyline()
      
       * Modification functions.
      func_build_road_local     = () ->
          mode = TSAG.I_Mouse_Build_Road.mode_local
          @controller_build_road.setMode(mode)
      
      func_build_road_collector = () ->
          mode = TSAG.I_Mouse_Build_Road.mode_collector
          @controller_build_road.setMode(mode)
      
      func_build_road_artery    = () ->
          mode = TSAG.I_Mouse_Build_Road.mode_artery
          @controller_build_road.setMode(mode)
      
      img_build_road_local     = null # Load Local road building image.
      img_build_road_collector = null # Load Collector road building image.
      img_build_road_artery    = null # Load Arterial road building image.
      
      @controller_ui.createButton(p1, func_build_road_local,     img_build_road_local)
      @controller_ui.createButton(p2, func_build_road_collector, img_build_road_collector)
      @controller_ui.createButton(p2, func_build_road_artery,    img_build_road_artery)
       */
    };

    return UI;

  })(BSS.Element);

}).call(this);
