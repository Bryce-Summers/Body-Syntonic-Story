// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BSS.Operator_Element = (function(superClass) {
    extend(Operator_Element, superClass);

    function Operator_Element() {
      Operator_Element.__super__.constructor.call(this, new BSS.Operator_Model());
      this._path = null;
      this._percentage = null;
      this.buildFromConfiguration();
    }

    Operator_Element.prototype.setFunction = function(func) {
      return this.getModel().setFunction(func);
    };


    /* Representation building from path mathmatics. */

    Operator_Element.prototype.buildFromConfiguration = function() {
      var container, number, operator_visual;
      container = this.getVisualRepresentation();
      container.clearVisuals();
      operator_visual = EX.Visual_Factory.newPoint(new BDS.Point(0, 0), EX.style.c_operator_fill, EX.style.radius_operator_default);
      container.addVisual(operator_visual);
      number = EX.Visual_Factory.new_label("1");
      number.position.x = -1;
      container.addVisual(number);
    };

    Operator_Element.prototype.reposition = function() {
      var loc, ref, up, visual;
      ref = this.getCurrentLocationAndHeading(), loc = ref[0], up = ref[1];
      visual = this.getVisualRepresentation();
      visual.setPosition(loc);
      visual.setUpDirection(up);
    };

    Operator_Element.prototype.setPath = function(path, percentage) {
      this._path = path;
      return this._percentage = percentage;
    };

    Operator_Element.prototype.getCurrentLocationAndHeading = function() {
      return this._path.getLocation(this._percentage);
    };

    Operator_Element.prototype.getRepresentationLocationAndHeading = function() {
      var angle, dx, dy, loc, pos, tan, visual;
      visual = this.getVisualRepresentation();
      pos = visual.getPosition();
      loc = new BDS.Point(pos.x, pos.y);
      angle = visual.getRotation();
      dx = Math.cos(angle);
      dy = Math.sin(angle);
      tan = new BDS.Point(dx, dy);
      return [loc, tan];
    };


    /* Element Interface. */

    return Operator_Element;

  })(BSS.Element);

}).call(this);
