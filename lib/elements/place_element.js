// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BSS.Place_Element = (function(superClass) {
    extend(Place_Element, superClass);

    function Place_Element(model) {
      Place_Element.__super__.constructor.call(this, model);
      this.init();
    }

    Place_Element.prototype.init = function() {
      this._places = new Set();
      this._camera_model = new BSS.Camera_Model();
      this._junctions = new Set();
      this._conditions = new Set();
      this._paths = new Set();
      this._operators = new Set();
      this._agents = new Set();
      this._visual_places = new THREE.Object3D();
      this._visual_junctions = new THREE.Object3D();
      this._visual_paths = new THREE.Object3D();
      this._visual_operators = new THREE.Object3D();
      this._visual_conditions = new THREE.Object3D();
      return this._visual_agents = new THREE.Object3D();
    };

    Place_Element.prototype.setVisualRepresentation = function(visual) {
      var obj;
      obj = this.getVisualRepresentation();
      return obj.add(visual);
    };

    Place_Element.prototype.populateViewLevels = function(levels, N) {
      levels[1].add(this._visual_places);
      levels[1].add(this._visual_junctions);
      levels[2].add(this._visual_paths);
      levels[2].add(this._visual_agents);
      levels[3].add(this._visual_operators);
      return levels[3].add(this._visual_conditions);

      /*
      @_places.forEach (element) =>
          levels[1].add(element.getVisualRepresentation())
      
      @_junctions.forEach (element) =>
          levels[1].add(element.getVisualRepresentation())
      
      @_paths.forEach (element) =>
          levels[2].add(element.getVisualRepresentation())
      
      @_operators.forEach (element) =>
          levels[3].add(element.getVisualRepresentation())
      @_conditions.forEach (element) =>
          levels[3].add(element.getVisualRepresentation())
       */
    };

    Place_Element.prototype.addPlace = function(element) {
      this._places.add(element);
      return this._visual_places.add(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.addJunction = function(element) {
      this._junction.add(element);
      return this._visual_junctions.add(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.addCondition = function(element) {
      this._conditions.add(element);
      return this._visual_conditions.add(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.addPath = function(element) {
      this._paths.add(element);
      return this._visual_paths.add(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.addAgent = function(element) {
      this._agents.add(element);
      return this._visual_agents.add(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.addOperator = function(element) {
      this._operators.add(element);
      return this._visual_operators.add(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.removePlace = function(element) {
      this._places["delete"](element);
      return this._visual_places.remove(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.removeJunction = function(element) {
      this._junction["delete"](element);
      return this._visual_junctions.remove(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.removeCondition = function(element) {
      this._conditions["delete"](element);
      return this._visual_conditions.remove(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.removePath = function(element) {
      this._paths["delete"](element);
      return this._visual_paths.remove(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.removeAgent = function(element) {
      this._agents["delete"](element);
      return this._visual_agents.remove(element.getVisualRepresentation().getVisual());
    };

    Place_Element.prototype.removeOperator = function(element) {
      this._operators["delete"](element);
      return this._visual_operators.remove(element.getVisualRepresentation().getVisual());
    };


    /* Inputs */

    Place_Element.prototype.time = function(dt) {
      return this._paths.forEach((function(_this) {
        return function(path) {
          return path.time(dt);
        };
      })(this));
    };

    return Place_Element;

  })(BSS.Element);

}).call(this);
