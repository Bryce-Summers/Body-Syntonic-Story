// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BSS.Agent_Element = (function(superClass) {
    extend(Agent_Element, superClass);

    function Agent_Element() {
      Agent_Element.__super__.constructor.call(this, new BSS.Agent_Model());
      this.buildFromConfiguration();
    }


    /* Representation building from path mathmatics. */

    Agent_Element.prototype.buildFromConfiguration = function() {
      var character_visual, container, loc, model, pivot, ref, up;
      container = this.getVisualRepresentation();
      container.clearVisuals();
      model = this.getModel();
      ref = model.getCurrentLocationAndHeading(), loc = ref[0], up = ref[1];
      character_visual = EX.Visual_Factory.newPoint(loc, EX.style.c_car_fill, EX.style.radius_agent_default);
      container.addVisual(character_visual);
      pivot = EX.Visual_Factory.newSprite("/assets/images/up_arrow.png", {
        x: -10,
        y: -10,
        w: 20,
        h: 10
      });
      this.arrow = new THREE.Object3D();
      this.arrow.add(pivot);
      this.arrow.position.z += .001;
      container.addVisual(this.arrow);
    };

    Agent_Element.prototype.reposition = function() {
      var loc, psy, ref, up, visual;
      ref = this.getModel().getCurrentLocationAndHeading(), loc = ref[0], up = ref[1];
      visual = this.getVisualRepresentation();
      visual.setPosition(loc);
      visual.setUpDirection(up);
      psy = this.getModel().lookupKey("psychology");
      if (psy === "left") {
        this.arrow.rotation.z = -Math.PI / 2 * .1 + .9 * this.arrow.rotation.z;
      }
      if (psy === "right") {
        this.arrow.rotation.z = Math.PI / 2 * .1 + .9 * this.arrow.rotation.z;
      }
      if (psy === "up") {
        this.arrow.rotation.z = 0 * .1 + .9 * this.arrow.rotation.z;
      }
    };

    Agent_Element.prototype.getRepresentationLocationAndHeading = function() {
      var angle, dx, dy, loc, pos, tan, visual;
      visual = this.getVisualRepresentation();
      pos = visual.getPosition();
      loc = new BDS.Point(pos.x, pos.y);
      angle = visual.getRotation();
      dx = Math.cos(angle);
      dy = Math.sin(angle);
      tan = new BDS.Point(dx, dy);
      return [loc, tan];
    };


    /* Element Interface. */

    return Agent_Element;

  })(BSS.Element);

}).call(this);
