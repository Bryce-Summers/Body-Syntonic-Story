// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BSS.Agent_Element = (function(superClass) {
    extend(Agent_Element, superClass);

    function Agent_Element() {
      Agent_Element.__super__.constructor.call(this, new BSS.Agent_Model());
      this.buildFromConfiguration();
    }


    /* Representation building from path mathmatics. */

    Agent_Element.prototype.buildFromConfiguration = function() {
      var character_visual, container, loc, model, p0, p1, p2, pLine0, pLine1, ref, up;
      container = this.getVisualRepresentation();
      container.clearVisuals();
      model = this.getModel();
      ref = model.getCurrentLocationAndHeading(), loc = ref[0], up = ref[1];
      p0 = new BDS.Point(0, 0);
      p1 = new BDS.Point(0, 10);
      p2 = new BDS.Point(10, 0);
      pLine0 = new BDS.Polyline(false, [p0, p1]);
      pLine1 = new BDS.Polyline(false, [p0, p2]);
      character_visual = EX.Visual_Factory.newPath(pLine0, EX.style.radius_path_default, EX.style.c_car_fill, true);
      container.addVisual(character_visual);
      character_visual = EX.Visual_Factory.newPath(pLine1, EX.style.radius_path_default, EX.style.c_car_fill, true);
      container.addVisual(character_visual);
    };

    Agent_Element.prototype.reposition = function() {
      var loc, ref, up, visual;
      ref = this.getModel().getCurrentLocationAndHeading(), loc = ref[0], up = ref[1];
      visual = this.getVisualRepresentation();
      visual.setPosition(loc);
      visual.setUpDirection(up);
    };

    Agent_Element.prototype.getRepresentationLocationAndHeading = function() {
      var angle, dx, dy, loc, pos, tan, visual;
      visual = this.getVisualRepresentation();
      pos = visual.getPosition();
      loc = new BDS.Point(pos.x, pos.y);
      angle = visual.getRotation();
      dx = Math.cos(angle);
      dy = Math.sin(angle);
      tan = new BDS.Point(dx, dy);
      return [loc, tan];
    };


    /* Element Interface. */

    return Agent_Element;

  })(BSS.Element);

}).call(this);
