// Generated by CoffeeScript 1.11.1

/*
 *
 * Element interface class.
 *
 * Written by Bryce Summers on 10.23.2017
 *
 * Elements tie together sets of functional models.
 * - Operating model, contains the mathematics of simulation.
 * - Visual Representation, specifies the display of this element on screen.
 * - Collision Representation, specifies the area or volume that this element takes up on screen.
 * - Audio Representation, specifies the audio that this element emits.
 *
 * Elements are responsible for storing the overarching configuration information and producing representations from it.
 */

(function() {
  BSS.Element = (function() {
    function Element(_model) {
      this._model = _model;
      this._model.setElement(this);
      this._visualRep = new BSS.Visual_Representation();
      this._audioRep = new BSS.Audio_Representation();
      this._mutable = true;
      this._configuration = {};
    }


    /*
    Configuration.
     */

    Element.prototype.setConfiguration = function(config) {
      return this._configuration = config;
    };

    Element.prototype.allowMutations = function() {
      return this._mutable = true;
    };


    /*
    Building.
     */

    Element.prototype.buildFromConfiguration = function() {
      return console.log("Please Implement me in subclass!");
    };


    /*
    General Queries.
     */

    Element.prototype.getConfiguration = function() {
      return this._configuration;
    };

    Element.prototype.getModel = function() {
      return this._model;
    };

    Element.prototype.getVisualRepresentation = function() {
      return this._visualRep;
    };

    Element.prototype.getAudioRepresentation = function() {
      return this._audioRep;
    };


    /*
    getCollisionRepresentation: () ->
        console.log("This is not necessary for keyboard input storytelling. It will be more useful for future games, like Sim Urban.")
        throw new Error("Implement me in subclass please!")
     */

    Element.prototype.getUIWindow = function() {
      return console.log("Please Implement me!");
    };

    return Element;

  })();

}).call(this);
