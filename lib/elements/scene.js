// Generated by CoffeeScript 1.11.1

/*
    SimUrban Scene Object.
    Rewritten by Bryce Summers on 10.23.2017
    
    purpose: This is the root node of all game initialization, storage, and references.

    NOTE: Agents and places are indistinguishable, except that agents are meant to be temporary,
        whereas places are meant to be eternal.
        Places may spawn agents.

    Scenes provide a global interface that handles settings, output related to the focus, and global game messages.
 */

(function() {
  BSS.Scene = (function() {
    function Scene() {
      this.root_visual = new THREE.Scene();
      this.view = new THREE.Object3D();
      this.view.name = "Scene view.";
      this.overlays = new THREE.Object3D();
      this.overlays.position.z = 1.0;
      this.overlays.name = "Overlays.";
      this.pivot = new THREE.Object3D();
      this.pivot.add(this.view);
      this.root_visual.add(this.overlays);
      this.root_visual.add(this.pivot);
      this._view_levels = null;
      this._io_root = null;
      this.init();
      this.init_scene_ui();
    }

    Scene.prototype.getVisualRepresentation = function() {
      return this.root_visual;
    };

    Scene.prototype.getView = function() {
      return this.view;
    };

    Scene.prototype.getPivot = function() {
      return this.pivot;
    };

    Scene.prototype.init = function() {
      var i, j, level, results;
      this._agents = new Set();
      this._active_agents = new Set();
      this._focus_agent = null;
      this._places = new Set();
      this._active_places = new Set();
      this._focus_place = null;
      this._view_levels = [];
      results = [];
      for (i = j = 1; j < 10; i = ++j) {
        level = new THREE.Object3D();
        level.position.z = 1.0 / 10 * i;
        this._view_levels.push(level);
        results.push(this.view.add(level));
      }
      return results;
    };

    Scene.prototype.init_scene_ui = function() {
      this._ui = new EX.UI(1.0);
      this.overlays.add(this._ui.getVisualRepresentation().getVisual());
      return this.ui_elements = {};
    };

    Scene.prototype.getUI = function() {
      return [this._ui, this.ui_elements];
    };

    Scene.prototype.setViewToPlace = function(place) {
      var j, len, level, ref;
      ref = this._view_levels;
      for (j = 0, len = ref.length; j < len; j++) {
        level = ref[j];
        while (level.children.length > 0) {
          level.children.pop();
        }
      }
      return place.populateViewLevels(this._view_levels, 10);
    };

    Scene.prototype.setInputRoot = function(io_root) {
      this._io_root = io_root;
      return this._io_mouse_main = this._io_root.getMouseController();

      /*
      view = @getVisual()
      @_ui = new BSS.E_UI_Game(@)
      view.add(@_ui.getVisual())
       */
    };

    Scene.prototype.time = function(dt) {
      this._active_places.forEach((function(_this) {
        return function(place) {
          return place.time(dt);
        };
      })(this));
    };

    Scene.prototype.activateAgent = function(agent) {
      this._active_agents.add(agent);
    };

    Scene.prototype.deactivateAgent = function(agent) {
      this._active_objects["delete"](agent);
    };

    Scene.prototype.newAgent = function(agent) {
      this._agents.add(agent);
    };

    Scene.prototype.destroyAgent = function(agent) {
      this._agents["delete"](agent);
    };

    Scene.prototype.setFocusAgent = function(agent) {
      return this._focus_agent = agent;
    };

    Scene.prototype.getFocusAgent = function() {
      return this._focus_agent;
    };

    Scene.prototype.setFocusPlace = function(place) {
      return this._focus_place = place;
    };

    Scene.prototype.getFocusPlace = function() {
      return this._focus_place;
    };

    Scene.prototype.activatePlace = function(element) {
      return this._active_places.add(element);
    };

    Scene.prototype.deactivatePlace = function(element) {
      return this._active_places["delete"](element);
    };

    Scene.prototype.addPlace = function(element) {
      return this._places.add(element);
    };

    Scene.prototype.deletePlace = function(element) {
      return this._places["delete"](element);
    };

    return Scene;

  })();

}).call(this);
