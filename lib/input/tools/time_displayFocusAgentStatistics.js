// Generated by CoffeeScript 1.11.1

/*
Written by Bryce Summers on Mar.21.2018
Updates the scene's ui based on the statistics of the focus agent.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EX.TimeTool_DisplayFocusAgentStatistics = (function(superClass) {
    extend(TimeTool_DisplayFocusAgentStatistics, superClass);

    function TimeTool_DisplayFocusAgentStatistics(scene, camera) {
      this.scene = scene;
      this.camera = camera;
      this._optionAnimation = null;
    }

    TimeTool_DisplayFocusAgentStatistics.prototype.time = function(dt) {
      var agent_model, config, focus_agent, message, ref, statistics, type, ui, ui_elements;
      focus_agent = this.scene.getFocusAgent();
      if (focus_agent === null) {
        return;
      }
      ref = this.scene.getUI(), ui = ref[0], ui_elements = ref[1];
      agent_model = focus_agent.getModel();
      statistics = agent_model.getStatistics();
      message = "";
      if (statistics.narrativeChanged()) {
        type = statistics.getNarrativeType();
        message = statistics.getNarrative();
        message = this.macrosubstituteStatisticsValues(message, statistics);
        if (statistics.hasOptionalNarrative()) {
          this._optionAnimation = new EX.FrameAnimation();
          config = {
            duration: 2000,
            timePerFrame: 100,
            frames: ["assets/images/speechbox.png", expression.png],
            dim: {
              x: -677 / 2,
              y: 47,
              w: 677,
              h: 61
            }
          };
          this._optionAnimation.configure(config);
        }
        return this.storyEvent(type, message, agent_model, this._optionAnimation);
      }
    };

    TimeTool_DisplayFocusAgentStatistics.prototype.keyEvent = function(key) {
      var agent_model, focus_agent, message, ref, statistics, ui, ui_elements;
      if (key === 'space' && this._optionAnimation !== null) {
        if (this._optionAnimation.isDone()) {
          this._optionAnimation = null;
          return;
        }
        focus_agent = this.scene.getFocusAgent();
        if (focus_agent === null) {
          return;
        }
        ref = this.scene.getUI(), ui = ref[0], ui_elements = ref[1];
        agent_model = focus_agent.getModel();
        statistics = agent_model.getStatistics();
        if (statistics.hasOptionalNarrative()) {
          message = statistics.getOptionalNarrative();
          message = this.macrosubstituteStatisticsValues(message, statistics);
          this.storyEvent(type, message, agent_model, null);
          return this._optionAnimation.finish();
        }
      }
    };

    TimeTool_DisplayFocusAgentStatistics.prototype.macrosubstituteStatisticsValues = function(message, statistics) {
      var end_of_word_index, name, prefix, slash_index, suffix, val;
      slash_index = message.indexOf("\\");
      while (slash_index > -1) {
        prefix = message.substring(0, slash_index);
        suffix = message.substring(slash_index);
        end_of_word_index = suffix.search(" ");
        if (end_of_word_index < 0) {
          end_of_word_index = suffix.length;
        }
        name = suffix.substring(1, end_of_word_index);
        suffix = suffix.substring(end_of_word_index);
        val = statistics.getValue(name);
        message = prefix + val + suffix;
        slash_index = message.indexOf("\\");
      }
      return message;
    };

    TimeTool_DisplayFocusAgentStatistics.prototype.storyEvent = function(type, message, agent_model, option_animation) {
      var box, box_sprite, connection, connection_sprite, loc, narration_box, ref, str, text, up;
      console.log("Type = " + type);
      console.log("Message = " + message);
      box_sprite = null;
      connection_sprite = null;
      if (type === "say") {
        box_sprite = "assets/images/speechbox.png";
        connection_sprite = "assets/images/speech_connection.png";
      } else if (type === "narrate") {
        box_sprite = "assets/images/narration_box.png";
        connection_sprite = "assets/images/narration_connection.png";
      } else if (type === "think" || type === "food") {
        box_sprite = "assets/images/thinkbox.png";
        connection_sprite = "/assets/images/think_connection.png";
      } else if (type === "good") {
        box_sprite = "assets/images/good_box.png";
        connection_sprite = "/assets/images/good_connection.png";
      } else if (type === "bad") {
        box_sprite = "assets/images/bad_box.png";
        connection_sprite = "assets/images/bad_connection.png";
      } else {
        console.log("Storytelling Event: '" + type + "' is not currently supported.");
      }
      narration_box = EX.Visual_Factory.newSprite(box_sprite, {
        x: -677 / 2,
        y: 47,
        w: 677,
        h: 61
      });
      connection = EX.Visual_Factory.newSprite(connection_sprite, {
        x: 0,
        y: 0,
        w: 64,
        h: 63
      });
      str = message;
      text = EX.Visual_Factory.new_label(str);
      text.position.z = .1;
      text.position.y = 47 + 63;
      text.position.x = -677 / 2 + 20;
      box = new THREE.Object3D();
      box.add(narration_box);
      box.add(connection);
      box.add(text);
      if (option_animation !== null) {
        box.add(option_animation);
      }
      ref = agent_model.getCurrentLocationAndHeading(), loc = ref[0], up = ref[1];
      box.position.copy(loc);
      box.rotation.z = Math.atan2(up.y, up.x) + Math.PI / 2;
      box.position.z = 2;
      return this.scene.addOverlay(box, 1);

      /*
      textbox = ui_elements.textbox
      textbox.str = statistics.getNarrative() # standardized label comes from style.
      ui.updateLabel(textbox, {update_str:true})
       */
    };

    TimeTool_DisplayFocusAgentStatistics.prototype.isIdle = function() {
      return true;
    };

    TimeTool_DisplayFocusAgentStatistics.prototype.finish = function() {};

    return TimeTool_DisplayFocusAgentStatistics;

  })(EX.I_Tool_Controller);

}).call(this);
